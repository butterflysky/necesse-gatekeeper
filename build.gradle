plugins {
    id 'java'
    id 'maven-publish'
}

// Change the values below this to your mods values
// To change the project name, edit the settings.gradle file

project.ext.modID = "gatekeeper" // The unique id of your mod. Must be all lowercase and cannot use special characters.
project.ext.modName = "GateKeeper" // The display name of your mod.
project.ext.modVersion = "1.0.0" // Your current builds version. Must follow the xx.xx... format.
project.ext.gameVersion = "1.0.2" // The target game version.
project.ext.modDescription = "A mod to enable access control for multiplayer servers." // Short description of what your mod is.
project.ext.author = "butterflysky" // Your name

/**
 * When setting clientside to true, it means servers do not need this mod for clients to connect and vice versa.
 * IMPORTANT: If you set this to true, make sure that your mod does not add any content or do anything
 * that could cause clients and servers to desync. This includes registering any items, objects, tiles, packets etc.
 */
project.ext.clientside = false

/**
 * The other mod dependencies of this mod
 * Dependencies define the default load order of mods
 * Uncomment and configure these if your mod has dependencies
 */
//project.ext.modDependencies = ["other.modid1", "other.modid2"]
//project.ext.modOptionalDependencies = ["optional.modid1", "optional.modid2"]

// The path to the games install directory
def gameDirectory = "/home/butterfly/.steam/steam/steamapps/common/Necesse"

// =================================================
// ========== DO NOT EDIT BELOW THIS LINE ==========
// =================================================

// Name of the jar
def jarName = "${project.ext.modName.replace(" ", "")}-${project.ext.gameVersion}-${project.ext.modVersion}"
def modOutputDir = file("$buildDir/mod")

group = project.ext.modID
version = project.ext.modVersion

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(25) // Latest as of now
        vendor = JvmVendorSpec.ADOPTIUM
    }

    // Compile to Java 8 bytecode for runtime compatibility while using a newer toolchain for compilation
    // The Necesse game requires Java 8 bytecode as specified on the Necesse wiki.
    sourceCompatibility = "$JavaVersion.VERSION_1_8"
    targetCompatibility = "$JavaVersion.VERSION_1_8"

}

tasks.withType(JavaCompile).configureEach {
    // If toolchain is used, this will instruct javac to output class files for Java 8
    options.release.set(8)
    options.encoding = "UTF-8"
    // Suppress warnings about obsolete Java 8 source/target options (until necesse devs decide to update the java version)
    options.compilerArgs += ["-Xlint:-options"]
}

repositories {
    mavenLocal()
    mavenCentral()
    // For accessing snapshot artifacts if needed
    maven {
        url = uri('https://s01.oss.sonatype.org/content/repositories/snapshots/')
    }
}

configurations {
    libDepends
    // Dev-only tool configuration for Vineflower decompiler
    vineflower {
        visible = false
        canBeConsumed = false
        canBeResolved = true
    }
}

// FIXED: Updated syntax for Gradle 9.1.0
sourceSets {
    main {
        java {
            destinationDirectory.set(new File(modOutputDir, "classes"))
        }
       
        output.resourcesDir = new File(modOutputDir, "resources")
       
        // Adds libDepends configuration to classpath
        compileClasspath += configurations.libDepends
    }
}

def buildLocation = "build/jar/"

if (!file(gameDirectory + "/Necesse.jar").exists()) {
    throw new Exception("Could not find game install directory. Make sure it is correct in build.gradle file.")
}

dependencies {
    // Prefer a local Maven coordinate for VS Code to auto-attach sources; fallback to direct file
    def m2Local = new File(System.getProperty('user.home'), ".m2/repository/local/necesse/necesse/${project.ext.gameVersion}/necesse-${project.ext.gameVersion}.jar")
    if (m2Local.exists()) {
        compileOnly "local.necesse:necesse:${project.ext.gameVersion}"
    } else {
        compileOnly files(gameDirectory + "/Necesse.jar")
    }
    implementation fileTree(gameDirectory + "/lib/")
    implementation fileTree("./mods/") // Add all mods located in local mods folder

    // Add any third party library dependencies here. Remember to use libDepends, so that they will be added to your jar on build
    // These are some examples:
//    libDepends group: 'com.google.guava', name: 'guava', version: '31.1-jre'
//    libDepends files("path/to/library/jar.jar")

    // Dev-only decompiler tool (not on compile or runtime classpaths)
    vineflower("org.vineflower:vineflower:1.11.1")
}

task createAppID {
    group = "necesse"
    description = "Creates steam_appid.txt file"

    doLast {
        file("steam_appid.txt").text = "1169040"
    }
}

task createModInfoFile(type: JavaExec) {
    group = "necesse"
    description = "Creates the mod info file"

    classpath = files(gameDirectory + "/Necesse.jar")
  doFirst {
    sourceSets.main.java.destinationDirectory.get().asFile.mkdirs()
  }

  mainClass.set("CreateModInfoFile")
    args = ["-file", "${sourceSets.main.java.destinationDirectory.get()}/mod.info",
            "-id", "${project.ext.modID}",
            "-name", "${project.ext.modName}",
            "-version", "${project.ext.modVersion}",
            "-gameVersion", "${project.ext.gameVersion}",
            "-description", "${project.ext.modDescription}",
            "-author", "${project.ext.author}",
            "-clientside", "${project.ext.clientside}",
            "-dependencies", project.ext.has("modDependencies") ? "[" + project.ext.modDependencies.join(", ") + "]" : "",
            "-optionalDependencies", project.ext.has("modOptionalDependencies") ? "[" + project.ext.modOptionalDependencies.join(", ") + "]" : ""]
}
// Makes compiling also create mod info file
tasks.named('classes') {
    dependsOn("createModInfoFile")
}

task runClient(type: JavaExec) {
    group = "necesse"
    description = "Run client with current mod"
    dependsOn("buildModJar", "createAppID")

    classpath = files(gameDirectory + "/Necesse.jar")

    jvmArgs = ["-Xms512m", "-Xmx4G", "-XX:+UnlockExperimentalVMOptions", "-XX:+UseG1GC", "-XX:G1NewSizePercent=20", "-XX:G1ReservePercent=20", "-XX:MaxGCPauseMillis=50", "-XX:G1HeapRegionSize=32M"]
    args = ["-dev", "-mod \"${buildLocation}\""]
}

task runDevClient(type: JavaExec) {
    group = "necesse"
    description = "Run client with current mod"
    dependsOn("buildModJar", "createAppID")

    classpath = files(gameDirectory + "/Necesse.jar")

    jvmArgs = ["-Xms512m", "-Xmx4G", "-XX:+UnlockExperimentalVMOptions", "-XX:+UseG1GC", "-XX:G1NewSizePercent=20", "-XX:G1ReservePercent=20", "-XX:MaxGCPauseMillis=50", "-XX:G1HeapRegionSize=32M"]
    args = ["-dev 1", "-mod \"${buildLocation}\""]
}

task runServer(type: JavaExec) {
    group = "necesse"
    description = "Run server with current mod"
    dependsOn("buildModJar")

    classpath = files(gameDirectory + "/Server.jar")

    mainClass.set("StartServer")
    jvmArgs = ["-Xms512m", "-Xmx4G", "-XX:+UnlockExperimentalVMOptions", "-XX:+UseG1GC", "-XX:G1NewSizePercent=20", "-XX:G1ReservePercent=20", "-XX:MaxGCPauseMillis=50", "-XX:G1HeapRegionSize=32M"]
    args = ["-mod \"${buildLocation}\""]
}

task buildModJar(type: Jar) {
    group = "necesse"
    description = "Generates the mod jar into the build folder"
    dependsOn("classes")

    doFirst {
        fileTree(dir: buildLocation).exclude("${jarName}.jar").visit { FileVisitDetails details ->
            delete details.file
        }
    }

  // Add compiled classes and generated resources
  from sourceSets.main.java.destinationDirectory.get()
  // Add resources under 'resources/' prefix in JAR
  from(sourceSets.main.output.resourcesDir) {
    into 'resources'
  }
  // Add the dependencies
  from configurations.libDepends.collect { it.isDirectory() ? it : zipTree(it) }

    archiveFileName.set("${jarName}.jar")
    destinationDirectory.set(file(buildLocation))
}

// ----------------------------------------------------------------------------
// Decompile Necesse.jar into a directory for IDE reference only (not compiled)
// ----------------------------------------------------------------------------
def decompiledOutDir = layout.projectDirectory.dir("external/necesse-src").asFile

tasks.register('decompileNecesse', Exec) { t ->
    group = "necesse"
    description = "Decompiles Necesse.jar into external/necesse-src using Vineflower"

    // Ensure output directory exists
    doFirst {
        decompiledOutDir.mkdirs()
    }

    // Input/outputs for up-to-date checks
    inputs.file(file(gameDirectory + "/Necesse.jar"))
    outputs.dir(decompiledOutDir)

    doFirst {
        def vfJar = configurations.vineflower.singleFile
        // Run the Vineflower CLI via its executable jar
        commandLine = [
            'java', '-jar', vfJar.absolutePath,
            file(gameDirectory + "/Necesse.jar").absolutePath,
            decompiledOutDir.absolutePath
        ]
    }
}

// ----------------------------------------------------------------------------
// Pack decompiled sources as a sources jar and publish Necesse to mavenLocal
// ----------------------------------------------------------------------------

def sourcesOutDir = layout.buildDirectory.dir('necesse')

tasks.register('packNecesseSources', Jar) { t ->
    group = "necesse"
    description = "Packs external/necesse-src into a -sources.jar"
    dependsOn('decompileNecesse')
    archiveBaseName.set('necesse')
    archiveClassifier.set('sources')
    destinationDirectory.set(sourcesOutDir)
    from(decompiledOutDir)
    doFirst {
        // Ensure the version is current in case updateGameVersion ran earlier in this build
        archiveVersion.set(project.ext.gameVersion)
    }
}

publishing {
    publications {
        create('necesse', MavenPublication) {
            groupId = 'local.necesse'
            artifactId = 'necesse'
            version = project.ext.gameVersion

            // Main binary jar: point to the installed game jar
            artifact(file(gameDirectory + "/Necesse.jar")) {
                builtBy(tasks.named('decompileNecesse')) // ensure existence before publish
            }

            // Attach sources jar
            artifact(tasks.named('packNecesseSources')) {
                classifier = 'sources'
            }
        }
    }
    repositories {
        mavenLocal()
    }
}

tasks.register('publishNecesseLocal') { t ->
    group = "necesse"
    description = "Publishes Necesse.jar and its sources to mavenLocal"
    dependsOn('packNecesseSources', 'publishNecessePublicationToMavenLocal')
}

// Ensure publication version matches the latest updated value at execution time
tasks.named('publishNecessePublicationToMavenLocal') {
    doFirst {
        publishing.publications.necesse.version = project.ext.gameVersion
    }
}

// ----------------------------------------------------------------------------
// Update project.ext.gameVersion from decompiled GameInfo.java
// ----------------------------------------------------------------------------
tasks.register('updateGameVersion') { t ->
    group = "necesse"
    description = "Updates project.ext.gameVersion from external/necesse-src/.../GameInfo.java"
    dependsOn('decompileNecesse')
    doLast {
        def gi = file('external/necesse-src/necesse/engine/GameInfo.java')
        if (!gi.exists()) throw new GradleException("GameInfo.java not found. Run decompileNecesse first.")
        def txt = gi.getText('UTF-8')
        def m = (txt =~ /new\s+GameVersion\(\"([^\"]+)\"\)/)
        if (!m.find()) throw new GradleException("Could not extract version from GameInfo.java")
        def ver = m.group(1)
        def gradleFile = file('build.gradle')
        def gtxt = gradleFile.getText('UTF-8')
        def replaced = gtxt.replaceAll(/(project\.ext\.gameVersion\s*=\s*\")[^\"]+(\"\s*)/, "${'$'}1${ver}${'$'}2")
        if (gtxt == replaced) throw new GradleException("Did not update build.gradle; pattern not found")
        gradleFile.write(replaced, 'UTF-8')
        println "Updated project.ext.gameVersion to ${ver}"
    }
}

// ----------------------------------------------------------------------------
// Dev setup convenience task
// ----------------------------------------------------------------------------
tasks.register('devSetup') {
    group = "necesse"
    description = "Decompile, sync gameVersion, pack sources, and publish to mavenLocal"
    dependsOn('decompileNecesse', 'updateGameVersion')
    finalizedBy('packNecesseSources', 'publishNecessePublicationToMavenLocal')
}
