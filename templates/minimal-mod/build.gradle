plugins {
    id 'java'
    id 'maven-publish'
    id 'eclipse'
}

// Change the values below to your mod's values
project.ext.modID = "examplemod"
project.ext.modName = "Example Mod"
project.ext.modVersion = "0.1.0"
project.ext.gameVersion = "1.0.2"
project.ext.modDescription = "Describe your mod here."
project.ext.author = "YourName"
project.ext.clientside = true

// Set this to your Necesse install directory
def gameDirectory = System.getenv('NECESSE_DIR') ?: "/home/you/.steam/steam/steamapps/common/Necesse"

def jarName = "${project.ext.modName.replace(" ", "")}-${project.ext.gameVersion}-${project.ext.modVersion}"
def modOutputDir = file("$buildDir/mod")
def buildLocation = "build/jar/"

group = project.ext.modID
version = project.ext.modVersion

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
        vendor = JvmVendorSpec.ADOPTIUM
    }
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

tasks.withType(JavaCompile).configureEach {
    options.release.set(17)
    options.encoding = "UTF-8"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url = uri('https://s01.oss.sonatype.org/content/repositories/snapshots/') }
}

configurations {
    libDepends
    vineflower {
        visible = false
        canBeConsumed = false
        canBeResolved = true
    }
}

sourceSets {
    main {
        java { destinationDirectory.set(new File(modOutputDir, "classes")) }
        output.resourcesDir = new File(modOutputDir, "resources")
        compileClasspath += configurations.libDepends
    }
}

if (!file(gameDirectory + "/Necesse.jar").exists()) {
    throw new Exception("Could not find game install directory. Set gameDirectory in build.gradle or NECESSE_DIR env var.")
}

dependencies {
    def m2Local = new File(System.getProperty('user.home'), ".m2/repository/local/necesse/necesse/${project.ext.gameVersion}/necesse-${project.ext.gameVersion}.jar")
    if (m2Local.exists()) {
        compileOnly "local.necesse:necesse:${project.ext.gameVersion}"
    } else {
        compileOnly files(gameDirectory + "/Necesse.jar")
    }
    implementation fileTree(gameDirectory + "/lib/")
    implementation fileTree("./mods/")

    // Dev-only decompiler tool
    vineflower("org.vineflower:vineflower:1.11.1")

    // Runtime JSON lib example (bundled into mod JAR via libDepends)
    // libDepends 'com.google.code.gson:gson:2.13.2'
}

task createModInfoFile(type: JavaExec) {
    group = "necesse"
    description = "Creates the mod info file"
    classpath = files(gameDirectory + "/Necesse.jar")
    doFirst { new File(modOutputDir, "classes").mkdirs() }
    mainClass.set("CreateModInfoFile")
    args = ["-file", "${modOutputDir}/classes/mod.info",
            "-id", "${project.ext.modID}",
            "-name", "${project.ext.modName}",
            "-version", "${project.ext.modVersion}",
            "-gameVersion", "${project.ext.gameVersion}",
            "-description", "${project.ext.modDescription}",
            "-author", "${project.ext.author}",
            "-clientside", "${project.ext.clientside}",
            "-dependencies", project.ext.has("modDependencies") ? "[" + project.ext.modDependencies.join(", ") + "]" : "",
            "-optionalDependencies", project.ext.has("modOptionalDependencies") ? "[" + project.ext.modOptionalDependencies.join(", ") + "]" : ""]
}

tasks.named('classes') {
    dependsOn("createModInfoFile")
}

task runClient(type: JavaExec) {
    group = "necesse"
    description = "Run client with current mod"
    dependsOn("buildModJar")
    classpath = files(gameDirectory + "/Necesse.jar")
    environment "SteamAppId", "1169040"
    jvmArgs = ["-Xms512m", "-Xmx4G", "-XX:+UnlockExperimentalVMOptions", "-XX:+UseG1GC", "-XX:G1NewSizePercent=20", "-XX:G1ReservePercent=20", "-XX:MaxGCPauseMillis=50", "-XX:G1HeapRegionSize=32M"]
    args = ["-dev", "-mod \"${buildLocation}\""]
}

task runDevClient(type: JavaExec) {
    group = "necesse"
    description = "Run client with current mod in dev mode"
    dependsOn("buildModJar")
    classpath = files(gameDirectory + "/Necesse.jar")
    environment "SteamAppId", "1169040"
    jvmArgs = ["-Xms512m", "-Xmx4G", "-XX:+UnlockExperimentalVMOptions", "-XX:+UseG1GC", "-XX:G1NewSizePercent=20", "-XX:G1ReservePercent=20", "-XX:MaxGCPauseMillis=50", "-XX:G1HeapRegionSize=32M"]
    args = ["-dev 1", "-mod \"${buildLocation}\""]
}

task runServer(type: JavaExec) {
    group = "necesse"
    description = "Run server with current mod"
    dependsOn("buildModJar")
    classpath = files(gameDirectory + "/Server.jar", fileTree(dir: gameDirectory + "/lib/"))
    mainClass.set("StartDesktopServer")
    jvmArgs = ["-Xms512m", "-Xmx4G", "-XX:+UnlockExperimentalVMOptions", "-XX:+UseG1GC", "-XX:G1NewSizePercent=20", "-XX:G1ReservePercent=20", "-XX:MaxGCPauseMillis=50", "-XX:G1HeapRegionSize=32M"]
    args = ["-mod \"${buildLocation}\""]
}

task buildModJar(type: Jar) {
    group = "necesse"
    description = "Generates the mod jar into the build folder"
    dependsOn("classes")
    from sourceSets.main.java.destinationDirectory.get()
    from(sourceSets.main.output.resourcesDir) { into 'resources' }
    from (configurations.libDepends.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude 'module-info.class'
        exclude 'META-INF/versions/**'
        exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'
    }
    archiveFileName.set("${jarName}.jar")
    destinationDirectory.set(file(buildLocation))
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// ------------------- Dev: Decompilation & Publishing -------------------
def sourcesOutDir = layout.buildDirectory.dir('necesse')
tasks.register('decompileNecesseSourcesJar', Exec) { t ->
    group = "necesse"
    description = "Decompiles Necesse.jar into a -sources.jar in build/necesse via Vineflower"
    doFirst { sourcesOutDir.get().asFile.mkdirs() }
    def sourcesJarProvider = providers.provider { new File(sourcesOutDir.get().asFile, "necesse-${project.ext.gameVersion}-sources.jar") }
    inputs.file(file(gameDirectory + "/Necesse.jar"))
    outputs.file(sourcesJarProvider)
    doFirst {
        def vfJar = configurations.vineflower.singleFile
        def outJar = sourcesJarProvider.get()
        def inJar = file(gameDirectory + "/Necesse.jar")
        if (outJar.absolutePath == inJar.absolutePath) {
            throw new GradleException("Refusing to overwrite Necesse.jar; destination equals source")
        }
        commandLine = [ 'java', '-jar', vfJar.absolutePath, '--file', inJar.absolutePath, outJar.absolutePath ]
    }
}

publishing {
    publications {
        create('necesse', MavenPublication) {
            groupId = 'local.necesse'
            artifactId = 'necesse'
            version = project.ext.gameVersion
            artifact(file(gameDirectory + "/Necesse.jar"))
            artifact(providers.provider { new File(sourcesOutDir.get().asFile, "necesse-${project.ext.gameVersion}-sources.jar") }) {
                classifier = 'sources'
                builtBy(tasks.named('decompileNecesseSourcesJar'))
            }
        }
    }
    repositories { mavenLocal() }
}

eclipse { classpath { downloadSources = true } }

// Keep publication version in sync at execution time
tasks.named('publishNecessePublicationToMavenLocal') {
    doFirst { publishing.publications.necesse.version = project.ext.gameVersion }
}

// Friendly alias that avoids the verbose 'Publication' name
tasks.register('publishNecesseToLocalMaven') { t ->
    group = "necesse"
    description = "Publishes Necesse.jar and its sources to mavenLocal"
    dependsOn('decompileNecesseSourcesJar', 'publishNecessePublicationToMavenLocal')
}

tasks.register('updateGameVersion') { t ->
    group = "necesse"
    description = "Updates project.ext.gameVersion from decompiled GameInfo.java in the sources JAR"
    dependsOn('decompileNecesseSourcesJar')
    doLast {
        def sourcesJar = new File(sourcesOutDir.get().asFile, "necesse-${project.ext.gameVersion}-sources.jar")
        if (!sourcesJar.exists()) throw new GradleException("Sources JAR not found. Run decompileNecesseSourcesJar.")
        def zip = new java.util.zip.ZipFile(sourcesJar)
        def entry = zip.getEntry('necesse/engine/GameInfo.java')
        if (entry == null) throw new GradleException("GameInfo.java not found in sources JAR")
        def txt = new String(zip.getInputStream(entry).bytes, 'UTF-8')
        zip.close()
        def m = (txt =~ /new\s+GameVersion\(\"([^\"]+)\"\)/)
        if (!m.find()) throw new GradleException("Could not extract version from GameInfo.java")
        def ver = m.group(1)
        def gradleFile = file('build.gradle')
        def gtxt = gradleFile.getText('UTF-8')
        if (gtxt.contains("project.ext.gameVersion = \"${ver}\"")) { println "project.ext.gameVersion already ${ver}"; return }
        def replaced = gtxt.replaceAll(/(project\.ext\.gameVersion\s*=\s*\")[^\"]+(\"\s*)/, "${'$'}1${ver}${'$'}2")
        if (gtxt == replaced) throw new GradleException("Did not update build.gradle; pattern not found")
        gradleFile.write(replaced, 'UTF-8')
        println "Updated project.ext.gameVersion to ${ver}"
    }
}

tasks.register('devSetup') {
    group = "necesse"
    description = "Decompile, sync gameVersion, and publish to mavenLocal"
    dependsOn('decompileNecesseSourcesJar', 'updateGameVersion')
    finalizedBy('publishNecesseToLocalMaven')
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

tasks.named('assemble') { dependsOn('buildModJar') }

